{"version":3,"sources":["components/Header/index.js","pages/Home/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","react_router_dom","to","Component","Home","filmes","loadMovies","bind","assertThisInitialized","_this2","fetch","then","r","json","setState","class","map","filme","index","key","id","alt","nome","src","foto","Routes","components_Header","react_router","exact","path","component","App","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bad0919.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'; \n\nclass Header extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"navbar\"> \n        <div className=\"container\">\n          <div className=\"header\">\n            <div className=\"logo\"><h1>Popcorn.</h1></div>\n            <ul className=\"nav\">\n              <li><Link to=\"/dsasa\">Pagina Inicial</Link></li>\n              <li><Link to=\"/dsasa\">Novidades</Link></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filmes: []\n    };\n\n    this.loadMovies = this.loadMovies.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadMovies();\n  }\n\n  loadMovies() {\n    //url da API http://sujeitoprogramador.com/r-api/?api=filmes\n    let url = 'http://sujeitoprogramador.com/r-api/?api=filmes';\n    fetch(url)\n      .then((r) => r.json())\n      .then((json) => {\n        this.setState({ filmes: json });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <div class=\"coming\">\n          <h1>Coming Soon</h1>\n          <div className=\"separador\" />\n        </div>\n\n        <div className=\"list\">\n          {this.state.filmes.map((filme, index) => {\n\n            return (\n              <article className=\"card\" key={filme.id}>\n                <div className=\"card-inner\">\n                  <div className=\"card-header\">\n                    <img alt={filme.nome} src={filme.foto}></img>\n                  </div>\n                  <div className=\"card-description\">\n                    <h2>{filme.nome}</h2>\n                    <Link to=\"/\" className=\"btn\">veja mais</Link>\n                  </div>\n                </div>\n              </article>\n            );\n          })}\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Home from './pages/Home';\n\n\nconst Routes = () => {\n    return (\n        <BrowserRouter>\n            <Header />\n            <Switch>\n                <Route exact path=\"{process.env.PUBLIC_URL + '/'}\" component={Home} />\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default Routes;","import React, { Component } from 'react'; \nimport Routes from './routes.js'; \nimport './style.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Routes/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}