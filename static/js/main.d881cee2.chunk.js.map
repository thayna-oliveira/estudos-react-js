{"version":3,"sources":["assets/biscoito.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","frase","frases","quebraBiscoito","bind","assertThisInitialized","numero","Math","floor","random","length","setState","react_default","a","createElement","className","src","require","App_Botao","nome","acao","Component","Botao","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mKCGlCC,qBAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,IAGTR,EAAKS,OAAS,CACZ,uDACA,+DACA,gDACA,mGACA,sDACA,yDACA,mCACA,qEACA,wDACA,oDACA,0EAGFT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBV,OAAAW,EAAA,EAAAX,CAAAD,IArBLA,gFA0BjB,IAAIO,EAAQJ,KAAKI,MACbM,EAASC,KAAKC,MAAMD,KAAKE,SAAWb,KAAKM,OAAOQ,QACpDV,EAAMC,MAAQ,IAAML,KAAKM,OAAOI,GAAU,IAC1CV,KAAKe,SAASX,oCAId,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,IAAKC,EAAQ,MAClCL,EAAAC,EAAAC,cAACI,EAAD,CAAOC,KAAK,iBAAiBC,KAAMxB,KAAKO,iBACxCS,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcnB,KAAKI,MAAMC,eAvC7BoB,cA6CZC,mLAEF,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMQ,QAAS3B,KAAKJ,MAAM4B,MAAOxB,KAAKJ,MAAM2B,cAJlDE,aAUL9B,IC9CKiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d881cee2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biscoito.a2bd231c.png\";","import React, { Component } from 'react';\nimport './style.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      frase: ''\n    };\n\n    this.frases = [\n      'A vida trará coisas boas se tiveres paciência.',\n      'Defeitos e virtudes são apenas dois lados da mesma moeda.',\n      'A maior de todas as torres começa no solo.',\n      'Demonstre amor e alegria em todas as oportunidades e verás que a paz nasce dentro de você.',\n      'Não compense na ira o que lhe falta na razão.',\n      'Não há que ser forte. Há que ser flexível.',\n      'Siga os bons e aprenda com eles.',\n      'Não importa o tamanho da montanha, ela não pode tapar o sol.',\n      'O bom-senso vai mais longe do que muito conhecimento.',\n      'Quem quer colher rosas deve suportar os espinhos.',\n      'São os nossos amigos que nos ensinam as mais valiosas lições.'\n    ];\n\n    this.quebraBiscoito = this.quebraBiscoito.bind(this);\n\n  }\n\n  quebraBiscoito(){\n    let state = this.state;\n    let numero = Math.floor(Math.random() * this.frases.length);\n    state.frase = '\"' + this.frases[numero] + '\"';\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <img className=\"img\" src={require('./assets/biscoito.png')}></img>\n        <Botao nome='Abrir biscoito' acao={this.quebraBiscoito}/>\n        <h3 className=\"textoFrase\">{this.state.frase}</h3>\n      </div>\n    );\n  }\n}\n\nclass Botao extends Component {\n  render() {\n    return (\n      <div>\n        <button className=\"btn\" onClick={this.props.acao}>{this.props.nome}</button>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}